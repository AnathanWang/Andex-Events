#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./run-dev.sh

set -e

echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Andex Events –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
if [ ! -f .env ]; then
    echo "‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ ./setup.sh –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
    exit 1
fi

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
export $(cat .env | grep -v '^#' | xargs)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
cleanup() {
    echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã..."
    pkill -f "uvicorn main:app" || true
    pkill -f "npm start" || true
    pkill -f "flutter run" || true
    exit 0
}

trap cleanup SIGINT SIGTERM

# –ó–∞–ø—É—Å–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ Redis —á–µ—Ä–µ–∑ Docker
echo "üóÑÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ Redis..."
docker-compose up -d postgres redis

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo "‚è≥ –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
sleep 10

# –ó–∞–ø—É—Å–∫ backend
echo "üêç –ó–∞–ø—É—Å–∫–∞–µ–º backend..."
cd backend
source venv/bin/activate

# –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å alembic)
if [ -f "alembic.ini" ]; then
    echo "üìä –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    alembic upgrade head
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
uvicorn main:app --reload --host 0.0.0.0 --port 8000 &
BACKEND_PID=$!
echo "‚úÖ Backend –∑–∞–ø—É—â–µ–Ω (PID: $BACKEND_PID)"
cd ..

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ backend
echo "‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞ backend..."
sleep 5

# –ó–∞–ø—É—Å–∫ frontend
echo "‚öõÔ∏è –ó–∞–ø—É—Å–∫–∞–µ–º frontend..."
cd frontend
npm start &
FRONTEND_PID=$!
echo "‚úÖ Frontend –∑–∞–ø—É—â–µ–Ω (PID: $FRONTEND_PID)"
cd ..

# –ó–∞–ø—É—Å–∫ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
if command -v flutter &> /dev/null; then
    read -p "ü§î –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "üì± –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ..."
        cd mobile
        flutter run &
        MOBILE_PID=$!
        echo "‚úÖ –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ (PID: $MOBILE_PID)"
        cd ..
    fi
fi

echo ""
echo "üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!"
echo ""
echo "üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:"
echo "   Backend API: http://localhost:8000"
echo "   API Docs: http://localhost:8000/docs"
echo "   Frontend: http://localhost:3000"
echo "   Database: postgresql://postgres:password@localhost:5432/andex_events"
echo "   Redis: redis://localhost:6379"
echo ""
echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤:"
echo "   Backend: tail -f backend/logs/app.log"
echo "   Frontend: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞"
echo ""
echo "üí° –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "   docker-compose logs postgres  # –õ–æ–≥–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
echo "   docker-compose logs redis     # –õ–æ–≥–∏ Redis"
echo ""
echo "üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C"

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
wait